{"version":3,"file":"ColorPicker.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\r\nimport { IColorPickerProps, IColorPickerStyleProps, IColorPickerStyles, IColorPicker } from './ColorPicker.types';\r\nimport { TextField } from '../../TextField';\r\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\r\nimport { ColorSlider } from './ColorSlider/ColorSlider';\r\nimport {\r\n  MAX_COLOR_HUE,\r\n  IColor,\r\n  IRGB,\r\n  getColorFromString,\r\n  getColorFromRGBA,\r\n  updateA,\r\n  updateH,\r\n  updateSV\r\n} from '../../utilities/color/colors';\r\n\r\nexport interface IColorPickerState {\r\n  color: IColor;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\r\n\r\nconst rgbaComponents: Array<keyof IRGB> = ['r', 'g', 'b', 'a'];\r\n\r\nexport class ColorPickerBase extends BaseComponent<IColorPickerProps, IColorPickerState> implements IColorPicker {\r\n  public static defaultProps = {\r\n    hexLabel: 'Hex',\r\n    redLabel: 'Red',\r\n    greenLabel: 'Green',\r\n    blueLabel: 'Blue',\r\n    alphaLabel: 'Alpha'\r\n  };\r\n\r\n  private _rgbaChangeHandlers: {\r\n    [K in keyof IRGB]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void\r\n  };\r\n  private _rgbaLabels: { [K in keyof IRGB]?: string };\r\n\r\n  constructor(props: IColorPickerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      color: getColorFromString(props.color)!\r\n    };\r\n\r\n    this._rgbaChangeHandlers = {} as any;\r\n    for (const component of rgbaComponents) {\r\n      this._rgbaChangeHandlers[component] = this._onRGBAChanged.bind(this, component);\r\n    }\r\n    this._rgbaLabels = {\r\n      r: props.redLabel,\r\n      g: props.greenLabel,\r\n      b: props.blueLabel,\r\n      a: props.alphaLabel\r\n    };\r\n  }\r\n\r\n  public get color(): IColor {\r\n    return this.state.color;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IColorPickerProps): void {\r\n    if (newProps.color) {\r\n      this._updateColor(getColorFromString(newProps.color));\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const props = this.props;\r\n    const { theme, className, styles } = props;\r\n    const { color } = this.state;\r\n\r\n    const classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className\r\n    });\r\n\r\n    return (\r\n      <div className={classNames.root}>\r\n        <div className={classNames.panel}>\r\n          <ColorRectangle color={color} onSVChanged={this._onSVChanged} />\r\n          <ColorSlider className=\"is-hue\" minValue={0} maxValue={MAX_COLOR_HUE} value={color.h} onChange={this._onHChanged} />\r\n          {!props.alphaSliderHidden && (\r\n            <ColorSlider\r\n              className=\"is-alpha\"\r\n              isAlpha\r\n              overlayStyle={{ background: `linear-gradient(to right, transparent 0, #${color.hex} 100%)` }}\r\n              minValue={0}\r\n              maxValue={100}\r\n              value={color.a}\r\n              onChange={this._onAChanged}\r\n            />\r\n          )}\r\n          <table className={classNames.table} cellPadding=\"0\" cellSpacing=\"0\">\r\n            <thead>\r\n              <tr className={classNames.tableHeader}>\r\n                <td className={classNames.tableHexCell}>{props.hexLabel}</td>\r\n                <td>{props.redLabel}</td>\r\n                <td>{props.greenLabel}</td>\r\n                <td>{props.blueLabel}</td>\r\n                {!props.alphaSliderHidden && <td>{props.alphaLabel}</td>}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <TextField\r\n                    className={classNames.input}\r\n                    value={color.hex || ''}\r\n                    onChange={this._onHexChanged}\r\n                    spellCheck={false}\r\n                    ariaLabel={props.hexLabel}\r\n                  />\r\n                </td>\r\n                {...rgbaComponents.map((comp: keyof IRGB) => {\r\n                  const isAlpha = comp === 'a';\r\n                  let value = String(color[comp] || 0);\r\n                  if (isAlpha) {\r\n                    if (props.alphaSliderHidden) {\r\n                      return null;\r\n                    }\r\n                    value = typeof color.a === 'number' ? String(color.a.toPrecision(3)) : '';\r\n                  }\r\n                  return (\r\n                    <td key={comp} style={{ width: '18%' }}>\r\n                      <TextField\r\n                        className={classNames.input}\r\n                        onChange={this._rgbaChangeHandlers[comp]}\r\n                        value={value}\r\n                        spellCheck={false}\r\n                        ariaLabel={this._rgbaLabels[comp]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onSVChanged = (s: number, v: number): void => {\r\n    this._updateColor(updateSV(this.state.color, s, v));\r\n  };\r\n\r\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\r\n    this._updateColor(updateH(this.state.color, h));\r\n  };\r\n\r\n  private _onAChanged = (ev: React.MouseEvent<HTMLElement>, a: number): void => {\r\n    this._updateColor(updateA(this.state.color, a));\r\n  };\r\n\r\n  private _onHexChanged = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string): void => {\r\n    if (newValue && newValue !== this.state.color.hex) {\r\n      this._updateColor(getColorFromString('#' + newValue));\r\n    }\r\n  };\r\n\r\n  private _onRGBAChanged(component: keyof IRGB, event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string): void {\r\n    const color = this.state.color;\r\n    if (String(color[component]) === newValue) {\r\n      return;\r\n    }\r\n\r\n    this._updateColor(\r\n      getColorFromRGBA({\r\n        r: color.r,\r\n        g: color.g,\r\n        b: color.b,\r\n        a: color.a || 100,\r\n        [component]: Number(newValue)\r\n      })\r\n    );\r\n  }\r\n\r\n  private _updateColor(newColor?: IColor): void {\r\n    if (!newColor) {\r\n      return;\r\n    }\r\n\r\n    const { onColorChanged } = this.props;\r\n    const { color } = this.state;\r\n    const hasColorStringChanged = newColor.str !== color.str;\r\n    if (newColor.h !== color.h || hasColorStringChanged) {\r\n      this.setState(\r\n        {\r\n          color: newColor\r\n        },\r\n        () => {\r\n          if (hasColorStringChanged && onColorChanged) {\r\n            onColorChanged(newColor.str, newColor);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}